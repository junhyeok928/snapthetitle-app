# HTTP 서버 - HTTPS로 리다이렉트
server {
    listen 80;
    server_name snapthetitle.com www.snapthetitle.com;

    # Let's Encrypt validation
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # 모든 HTTP 요청을 HTTPS로 리다이렉트
    location / {
        return 301 https://snapthetitle.com$request_uri;
    }
}

# HTTPS 서버 (www → non-www 리다이렉트)
server {
    listen 443 ssl http2;
    server_name www.snapthetitle.com;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/snapthetitle.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/snapthetitle.com/privkey.pem;

    # SSL 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 보안 헤더 추가
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # www → non-www 리디렉트
    location / {
        return 301 https://snapthetitle.com$request_uri;
    }
}

# HTTPS 서버 (non-www)
server {
    listen 443 ssl http2;
    server_name snapthetitle.com;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/snapthetitle.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/snapthetitle.com/privkey.pem;

    # SSL 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 보안 헤더 추가
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    client_max_body_size 100M;  # 파일 업로드 최대 용량 허용

    # ====== React 캐싱 최적화 ======

    # index.html → no-cache (항상 최신 HTML)
    location = /index.html {
        root /usr/share/nginx/html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # JS / CSS / 폰트 / 이미지 → 해시 기반 long cache
    location ~* \.(?:js|css|woff2?|ttf|eot|svg|ico|jpg|jpeg|png|webp)$ {
        root /usr/share/nginx/html;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    # SPA 라우팅 fallback
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /index.html;
    }

    # ====== 업로드 파일 서빙 ======

    # 업로드 파일 캐싱 (webp, jpg, jpeg, png)
    location ~* ^/uploads/.*\.(webp|jpg|jpeg|png)$ {
        proxy_pass http://backend:8080;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # 업로드 파일 프록시
    location /uploads/ {
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # ====== API 프록시 ======
    location /api/ {
        proxy_pass http://backend:8080;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
